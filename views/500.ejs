<!DOCTYPE html>
<!--


555555555555555555      000000000          000000000
5::::::::::::::::5    00:::::::::00      00:::::::::00
5::::::::::::::::5  00:::::::::::::00  00:::::::::::::00
5:::::555555555555 0:::::::000:::::::00:::::::000:::::::0
5:::::5            0::::::0   0::::::00::::::0   0::::::0
5:::::5            0:::::0     0:::::00:::::0     0:::::0
5:::::5555555555   0:::::0     0:::::00:::::0     0:::::0
5:::::::::::::::5  0:::::0 000 0:::::00:::::0 000 0:::::0
555555555555:::::5 0:::::0 000 0:::::00:::::0 000 0:::::0
            5:::::50:::::0     0:::::00:::::0     0:::::0
            5:::::50:::::0     0:::::00:::::0     0:::::0
5555555     5:::::50::::::0   0::::::00::::::0   0::::::0
5::::::55555::::::50:::::::000:::::::00:::::::000:::::::0
 55:::::::::::::55  00:::::::::::::00  00:::::::::::::00
   55:::::::::55      00:::::::::00      00:::::::::00
     555555555          000000000          000000000



  This is the default "500: Server Error" page.
  User agents that don't "Accept" HTML will see a JSON version instead.
  You can customize the control logic for your needs in `config/500.js`

  Sails considers a request in a "500: Server Error" state when
  your app throws a catchable error (not inside of an asynchronous callback).

  You can also trigger this response from one of your controllers or policies with:
  `return res.serverError( e );`
  (where `e` is an optional message, error, or array of errors to include in the response)

-->
<html>
<head>
  <title>500 (Server Error)</title>
  <style>

    .message {
      position: absolute;
      top: 50%;
      left: 50%;
      text-align: center;
      width: 100%;
      transform: translateX(-50%) translateY(-50%);
      color: #f2f2f2;
      text-shadow: 2px 2px 5px rgba(0,0,0,.5);
      pointer-events: none;
    }

    a {
      color: #DF3D82;
      border: 1px solid transparent;
      border-bottom: 1px solid #DF3D82;
      text-decoration: none;
    }

    a:hover {
      border-top: 1px solid #DF3D82;
      background-color: rgba(255,255,255,.25);
    }
  </style>
  <script src="https://rawgithub.com/soulwire/sketch.js/v1.0/js/sketch.min.js"></script>
</head>
<body>
  <div id="container"></div>
  <div class="message">
    <div class="px100 bold">
      500
    </div>
    <div class="px20 uppercase pull-top-light ">
      server error
    </div>
  </div>
  
  <script type="text/javascript">
    function Particle(x, y, radius) {
      this.init(x, y, radius);
    }

    Particle.prototype = {

      init: function (x, y, radius) {
        this.alive = true;
        this.radius = radius || 10;
        this.wander = 0.15;
        this.theta = random(TWO_PI);
        this.drag = 0.99;
        this.color = '#f2f2f2';

        this.x = x || 0.0;
        this.y = y || 0.0;

        this.vx = 0.0;
        this.vy = 0.0;
      },

      move: function () {

        this.x += this.vx;
        this.y += this.vy;

        this.vx *= this.drag;
        this.vy *= this.drag;

        this.theta += random(-0.5, 0.5) * this.wander;
        this.vx += sin(this.theta) * 0.1;
        this.vy += cos(this.theta) * 0.1;

        this.radius *= 0.96;
        this.alive = this.radius > 0.1;
      },

      draw: function (ctx) {
        ctx.beginPath();
        ctx.arc(this.x, this.y, this.radius, 0, TWO_PI);
        ctx.fillStyle = this.color;
        ctx.fill();
      }
    };

// ----------------------------------------
// Example
// ----------------------------------------

var MAX_PARTICLES = 100;
var COLOURS = ['#69D2E7', '#DF3D82'];

var particles = [];
var pool = [];

var demo = Sketch.create({
  container: document.getElementById('container')
});

demo.setup = function () {

  // Set off some initial particles.
  var i, x, y;

  for (i = 0; i < 20; i++) {
    x = (demo.width * 0.5) + random(-100, 100);
    y = (demo.height * 0.5) + random(-100, 100);
    demo.spawn(x, y);
  }
};

demo.spawn = function (x, y) {

  if (particles.length >= MAX_PARTICLES)
    pool.push(particles.shift());

  particle = pool.length ? pool.pop() : new Particle();
  particle.init(x, y, random(5, 40));

  particle.wander = random(0.5, 2.0);
  particle.color = random(COLOURS);
  particle.drag = random(0.9, 0.99);

  theta = random(TWO_PI);
  force = random(2, 8);

  particle.vx = sin(theta) * force;
  particle.vy = cos(theta) * force;

  particles.push(particle);
}

demo.update = function () {
  var i, particle;
  for (i = particles.length - 1; i >= 0; i--) {
    particle = particles[i];
    if (particle.alive) particle.move();
    else pool.push(particles.splice(i, 1)[0]);
  }
};

demo.draw = function () {
  demo.globalCompositeOperation = 'lighter';
  for (var i = particles.length - 1; i >= 0; i--) {
    particles[i].draw(demo);
  }
};

demo.mousemove = function () {
  var particle, theta, force, touch, max, i, j, n;
  for (i = 0, n = demo.touches.length; i < n; i++) {
    touch = demo.touches[i], max = 1;
    for (j = 0; j < max; j++) demo.spawn(touch.x, touch.y);
  }
};
</script>

</body>
</html>